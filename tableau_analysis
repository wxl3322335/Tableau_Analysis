import os
import re
import zipfile

import lxml.etree
import numpy as np
import pandas
import pandas as pd


class Workbook:
    """
    Defines a workbook object from a filename.
    """

    def __init__(self, filename):
        self.filename = os.path.normpath(filename)
        self.xml = self._get_xml()

        self.custom_sql = self._get_custom_sql()
        self.files = self._get_files()
        self.onedrive = self._get_onedrive()
        self.connections = self._get_db_connections()

        # self.fonts = self._get_fonts()
        self.colors = self._get_colors()
        self.color_palettes = self._get_color_palettes()
        self.images = self._get_images()
        self.shapes = self._get_shapes()

    @property  # allow attribute to get value after calling hide fields method
    def hidden_fields(self):
        return self._get_hidden_fields()

    @property
    def active_fields(self):
        return self._get_active_fields()

    @property
    def fonts(self):
        return self._get_fonts()

    def _get_xml(self):
        """
        Returns the xml of the given .twb or .twbx file.
        """

        # Ensure workbook_file is a workbook file
        twb = self.filename.split(".")

        if twb[-1][:3] != "twb" or len(twb) == 1:
            return self.filename + " is not a valid .twb or .twbx file."

        else:

            # unzip packaged workbooks to obtain xml
            if twb[-1] == "twb":
                xml = lxml.etree.parse(self.filename).getroot()

            else:
                with open(self.filename, "rb") as binfile:
                    twbx = zipfile.ZipFile(binfile)
                    name = [w for w in twbx.namelist() if w.find(".twb") != -1][0]
                    unzip = twbx.open(name)
                    xml = lxml.etree.parse(unzip).getroot()

            return xml

    def _get_custom_sql(self):
        """
        Returns a list of all unique custom sql queries in the workbook.
        """

        search = self.xml.xpath("//relation[@type='text']")
        queries = list(set([sql.text.lower() for sql in search]))

        return queries

    def _get_files(self):
        """
        Returns a list of file connections in the workbook.
        """

        search = self.xml.xpath("//connection[@filename != '']")
        files = list(set([f.attrib["filename"] for f in search]))

        return files

    def _get_onedrive(self):
        """
        Returns a list of onedrive connections in the workbook.
        """

        search = self.xml.xpath("//connection[@cloudFileProvider='onedrive']")
        onedrive = list(set([od.attrib["filename"] for od in search]))

        return onedrive

    def _get_db_connections(self):

        """
        Returns a list of other database connections in the workbook.
        """

        search = self.xml.xpath("//connection[@dbname]")
        dbs = list(set([(db.attrib["dbname"], db.attrib["class"]) for db in search]))

        return dbs

    def _get_fonts(self):
        """
        Returns a list of fonts used in the workbook.
        """

        font_search1 = self.xml.xpath("//format[@attr = 'font-family']")
        font_search2 = self.xml.xpath("//run[@fontname]")

        fonts1 = [font.attrib["value"] for font in font_search1]
        fonts2 = [font.attrib["fontname"] for font in font_search2]
        fonts = list(set(fonts1 + fonts2))

        return fonts

    def _get_colors(self):
        """
        Returns dataframe of all individual colors and their associated elements in
        the workbook.
        """

        all_colors = []

        # Get worksheets in workbook
        wksht_search = self.xml.xpath("//worksheet")
        for sheet in wksht_search:

            # Get style elements for each worksheet
            style_search = sheet.xpath(".//style-rule[./format[contains(@value, '#')]]")
            for style in style_search:

                # Get colors for each style element
                color_search = style.xpath(".//format[contains(@value, '#')]")
                for color in color_search:
                    all_colors.append(
                        (
                            sheet.attrib["name"],
                            style.attrib["element"],
                            color.attrib["value"],
                        )
                    )

            # Get tooltip elements for each worksheet
            text_search = sheet.xpath(
                ".//formatted-text[./run[contains(@fontcolor, '#')]]"
            )
            for text in text_search:

                # Get fontcolors for each tooltip text element
                ttcolor_search = text.xpath(".//run[contains(@fontcolor, '#')]")
                for color in ttcolor_search:
                    all_colors.append(
                        (
                            sheet.attrib["name"],
                            "tooltip",
                            color.attrib["fontcolor"],
                        )
                    )

        unique_colors = list(set(all_colors))

        color_df = pandas.DataFrame(
            unique_colors, columns=["Sheet", "Element", "Color"]
        ).sort_values(["Sheet", "Element"])

        return color_df

    def _get_color_palettes(self):
        """
        Returns list of all named color palettes used in the workbook.
        """

        search = self.xml.xpath("//encoding[@palette !='']")
        palettes = list(set([color.attrib["palette"] for color in search]))

        return palettes

    def _get_hidden_fields(self):
        """
        Returns list of all hidden fields and their datasources in the
        workbook.
        """

        datasources = self.xml.xpath(
            "//datasource[@caption and ./column[@caption or @name]]"
        )
        regex = r"^\[|\]\Z"  # replace brackets from field strings
        fields = []

        for d in datasources:
            # return captions for calculated fields, otherwise return name
            has_caption = d.xpath("./column[@caption and @name and @hidden='true']")
            all_cols = d.xpath("./column[@name and @hidden='true']")

            fields += [
                (col.attrib["caption"], d.attrib["caption"]) for col in has_caption
            ]
            fields += [
                (re.sub(regex, "", col.attrib["name"]), d.attrib["caption"])
                for col in all_cols
                if col not in has_caption
            ]

        return sorted(list(set(fields)))

    def _get_active_fields(self):
        """
        Returns list of all used fields and their datasources in the workbook.
        """

        # views = self.xml.xpath(("//view[.//datasource[@name != 'Parameters']]"))
        regex = r"^\[|\]\Z"  # replace brackets from field strings
        fields = []

        # for v in views:

        datasources = self.xml.xpath(
            (
                "//datasource-dependencies[@datasource != 'Parameters' and "
                "./column[@caption or @name]]"
            )
        )

        for d in datasources:
            # datasource-dependencies element does not show datasource name,
            # just coded string
            ds_name = d.attrib["datasource"]
            ds_caption = self.xml.xpath(
                ".//datasource[@name='{}' and @caption]".format(ds_name)
            )[0].attrib["caption"]

            # return captions for calculated fields, otherwise return name
            has_caption = d.xpath("./column[@caption and @name]")
            all_cols = d.xpath("./column[@name]")

            fields += [(col.attrib["caption"], ds_caption) for col in has_caption]
            fields += [
                (re.sub(regex, "", col.attrib["name"]), ds_caption)
                for col in all_cols
                if col not in has_caption
            ]

        return sorted(list(set(fields)))

    def _get_fields(self):
        """
        Returns list of all fields and their datasources in the workbook.
        """

        fields = self.hidden_fields + self.active_fields
        df_ds = pd.DataFrame(sorted(fields), columns=['field_name', 'datasource_name'])

        tmp1 = self._get_worksheets()[['filed_name', 'datasource', 'worksheet']]
        df_ds = df_ds.merge(tmp1, how='left', left_on=['field_name', 'datasource_name'],
                            right_on=['filed_name', 'datasource'])
        df_ds['is_used'] = np.where(pd.isnull(df_ds['worksheet']), 'not used', 'is_used')
        return df_ds[['datasource_name','field_name','is_used']]

    def _get_images(self):
        """
        Returns list of all image paths in the workbook.
        """

        search = self.xml.xpath(
            "//zone[@_.fcp.SetMembershipControl.false...type = 'bitmap']"
        )
        images = list(set([img.attrib["param"].lower() for img in search]))

        return images

    def _get_shapes(self):
        """
        Returns list of all shape names in the workbook.
        """

        search = self.xml.xpath("//shape[@name != '']")
        shapes = list(set([shape.attrib["name"].lower() for shape in search]))

        return shapes

    def hide_field(self, field: str, datasource: str = None, hide: bool = True):
        """
        Hides arbitrary field from workbook.
        - datasource: if the datasource is not specified, all instances of the
        provided field (for all datasources) will be hidden.
        - hide: by default, the function hides fields. Set hide to False to
        unhide hidden fields from the workbook.
        """

        col_name = "[{}]".format(field)

        # search for captions for calculated fields, otherwise search for name
        if datasource == None:  # grab all instances of field
            to_hide = self.xml.xpath(
                "//datasource/column[@name = '{}']".format(col_name)
            ) + self.xml.xpath("//datasource/column[@caption = '{}']".format(field))

        else:  # grab all instances of datasource/field (should be length 1)
            to_hide = self.xml.xpath(
                "//datasource[@caption = '{}']/column[@name = '{}']".format(
                    datasource, col_name
                )
            ) + self.xml.xpath(
                "//datasource[@caption = '{}']/column[@caption = '{}']".format(
                    datasource, field
                )
            )

        for col in to_hide:
            col.attrib["hidden"] = str(hide).lower()

    def change_fonts(self, default: str = "Arial", font_dict: dict = None):
        """
        Replaces fonts in workbook xml.
        - default: default font to map all fonts to.
        - font_dict: mapping of current fonts to new fonts; if no font_dict is provided,
        all fonts are changed to default argument. font_dict requires a mapping from
        "Default" to a new font if you want to replace default fonts that are not
        mentioned explicitly. Otherwise, the font from the default argument is used.
        """

        if font_dict == None:

            fonts_1 = self.xml.xpath("//format[@attr = 'font-family']")
            fonts_2 = self.xml.xpath("//run")

            for font in fonts_1:
                font.attrib["value"] = default

            for font in fonts_2:
                font.attrib["fontname"] = default

            # replace fonts that do not show up explicitly
            styles = self.xml.xpath("//style-rule[@element]")
            for style in styles:
                if len(style.xpath("./format[@attr = 'font-family']")) == 0:
                    style.insert(1,
                                 lxml.etree.Element(
                                     "format", attrib={"attr": "font-family", "value": default}
                                 )
                                 )

            # formatted_texts = self.xml.xpath("//formatted-text")
            # for text in formatted_texts:
            #     text.insert(1, lxml.etree.Element("run", attrib={"fontname": default}))

        else:

            if "Default" not in font_dict.keys():
                font_dict["Default"] = default

            for old_font in font_dict.keys():

                fonts_1 = self.xml.xpath(
                    "//format[@attr = 'font-family' and @value = '{}']".format(old_font)
                )
                fonts_2 = self.xml.xpath("//run[@fontname = '{}']".format(old_font))
                fonts_3 = [x for x in self.xml.xpath("//run") if x not in fonts_2]

                for font in fonts_1:
                    font.attrib["value"] = font_dict[old_font]

                for font in fonts_2:
                    font.attrib["fontname"] = font_dict[old_font]

                for font in fonts_3:
                    font.attrib["fontname"] = font_dict["Default"]

            # replace fonts that do not show up explicitly
            styles = self.xml.xpath("//style-rule[@element]")
            for style in styles:
                if len(style.xpath("./format[@attr = 'font-family']")) == 0:
                    style.insert(
                        lxml.etree.ElementTree.Element(
                            "format",
                            attrib={"attr": "font-family", "value": font_dict["Default"]},
                        )
                    )

            # formatted_texts = self.xml.xpath("//formatted-text")
            # for text in formatted_texts:
            #     text.insert(
            #         lxml.etree.ElementTree.Element(
            #             "run", attrib={"fontname": font_dict["Default"]}
            #         )
            #     )

    def save(self, filename: str = None):
        """
        Exports xml to Tableau workbook file.
        - filename: destination and name of the file. Both packaged and unpackaged
        workbooks may be saved as ".twb" files, but only packaged workbooks may be
        saved as ".twbx" files.
        """

        if filename == None:
            fn = self.filename
        else:
            fn = os.path.normpath(filename)

        # twb / twbx -> twb
        if fn.endswith(".twb"):
            tree = lxml.etree.ElementTree(self.xml)
            tree.write(fn)

        # twbx -> twbx
        elif fn.endswith(".twbx") and self.filename.endswith(".twbx"):

            # create temp "[workbook name].twb files" folder for holding extracts
            path = os.sep.join(fn.split(os.sep)[:-1])
            name = fn.split(os.sep)[-1][:-1]

            if not os.path.exists(path + os.sep + name + " files"):

                os.mkdir(path=path + os.sep + name + " files")

                # store extract data in folder
                with open(self.filename, "rb") as twbx:

                    zf = zipfile.ZipFile(twbx)
                    package = [x for x in zf.namelist() if not x.endswith(".twb")]

                    for p in package:
                        zf.extract(p, path=path + os.sep + name + " files")

            # create twb
            tree = lxml.etree.ElementTree(self.xml)
            tree.write(path + os.sep + name)

            # gather all files to zip
            all_files = []

            for dirname, subdirs, files in os.walk(path):
                for filename in files:
                    all_files.append(os.path.join(dirname, filename))

            files_to_zip = [
                f
                for f in all_files
                if f.startswith(path + os.sep + name) and f.find(".twbx") == -1
            ]

            # zip twb with everything else
            with zipfile.ZipFile(fn, "w", zipfile.ZIP_DEFLATED) as zip_writer:

                for f in files_to_zip:
                    zip_writer.write(f, arcname="." + os.sep + name + f.split(name)[-1])

        else:
            raise NameError("Cannot save unpackaged workbooks as packaged workbooks!")

    def _get_dashbords(self):
        """
        Returns list of all sheets a in the workbook.
        """

        worksheets = self.xml.xpath(
            ".//windows/window[@class='dashboard']"
        )
        sheetnames = []

        for d in worksheets:
            ds_name = d.attrib["name"]
            sheets = d.xpath("./viewpoints/viewpoint[@name]")
            sheetnames += [(ds_name, col.attrib["name"]) for col in sheets]
        return pd.DataFrame(sheetnames, columns=['dashboard', 'worksheet'])

    def _get_worksheets(self):
        """
        Returns list of all sheets a in the workbook.
        """
        sheet_field = []
        caption_filed = []
        ds_dict = {}
        worksheets = self.xml.xpath(".//worksheets/worksheet")
        for worksheet in worksheets:
            for dsfield in worksheet.xpath("./table/view/datasources/datasource"):
                ds_dict[dsfield.attrib['name']] = dsfield.attrib['caption']

            for ds in worksheet.xpath("./table/view/datasource-dependencies"):
                sheet_field += [(worksheet.attrib["name"], ds.attrib['datasource'], col.attrib["name"]) for col in
                                ds.xpath("./column[@name]")]

                # 计算字段
                caption1 = ds.xpath("./column[@caption]")
                formula1 = ds.xpath("./column/calculation[@formula]")
                caption_filed += [(worksheet.attrib["name"], ds.attrib['datasource'], col.attrib["caption"],
                                   col.attrib["name"], col2.attrib["formula"]) for col, col2 in zip(caption1, formula1)]

                # 所有数据源匹配计算公式
                df_caption = pd.DataFrame(caption_filed,
                                          columns=['worksheet', 'datasource', 'filed_name2', 'calculation_name',
                                                   'formula'])
                df_name = pd.DataFrame(sheet_field, columns=['worksheet', 'datasource', 'filed_name'])
                df_all_filed = pd.merge(df_name,
                                        df_caption[['worksheet', 'calculation_name', 'filed_name2', 'formula']],
                                        how='left', left_on=['worksheet', 'filed_name'],
                                        right_on=['worksheet', 'calculation_name'])
                df_all_filed['filed_name'] = np.where(pd.notnull(df_all_filed['filed_name2']),
                                                      df_all_filed['filed_name2'], df_all_filed['filed_name'])
                df_all_filed = df_all_filed[['worksheet', 'datasource', 'filed_name', 'formula']]
                df_all_filed['datasource'] = df_all_filed['datasource'].map(ds_dict)
                df_all_filed['filed_name'] = list(map(lambda x:re.sub(r"^\[|\]\Z", "",x),df_all_filed['filed_name']))
        return df_all_filed




if __name__ == '__main__':
    mytableau = Workbook('/Users/wxl/Desktop/TableauPy/DashbordAnalysis.twbx')
    worksheet = mytableau._get_worksheets()
    datasource = mytableau._get_fields()
    dashboard = mytableau._get_dashbords()
    dashboard_worksheet = pd.merge(dashboard,worksheet,how='left',on='worksheet')


    # df1 = mytableau._get_worksheets()
    # df2 = mytableau._get_dashbords()
    # df3 = mytableau.fields
    # df4 = pd.merge(df2,df1,how='left',on=['worksheet'])
    print(datasource)
